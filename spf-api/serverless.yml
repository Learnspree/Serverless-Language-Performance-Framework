# Serverless Performance Test Framework
# Config file for Lambda Service to store provided lambda metrics data into Dynamo DB

# Cost calculations service based on provided performance data
# This function is de-coupled from the lambda-metrics-service so that re-calculation of costs is 
# possible if pricing models change

service: spf-api

plugins:
  - serverless-domain-manager

custom:
  dynamoDeletionPolicy:
    dev: Delete
    prod: Retain
  customDomain:
    domainName: ${opt:domain,'api.serverlessperformance.net'}
    basePath: ${opt:stage,'dev'}

provider:
  name: aws
  memorySize: 128
  timeout: 12
  stage: ${opt:stage,'dev'}
  region: ${opt:region,'us-east-1'}

# you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
      Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/*"
    - Effect: "Allow"
      Action:
        - "dynamodb:Query"
        - "dynamodb:Scan"
      Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/*/index/*"
    - Effect: "Allow"
      Action:
        - "dynamodb:DescribeStream"
        - "dynamodb:GetRecords"
        - "dynamodb:GetShardIterator"
        - "dynamodb:ListStreams"
      Resource:
        Fn::GetAtt:
          - LambdaMetricsTable
          - StreamArn


# packaging information here
functions:
  get-mean:
    handler: getruntime/mean.getMeanDuration
    runtime: python3.7
    timeout: 5
    environment:
      DYNAMODB_TABLE: "ServerlessFunctionMetrics-${self:provider.stage}"
    events:
      - http:
          path:  runtimes/{runtimeId}/mean
          method: get
          cors:
            origin: ${opt:corsorigin,'*'}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false
          request:
            parameters:
              querystrings:
                platform: false
                state: false
                memory: false
                type: false
                startDate: false
                endDate: false
              paths:
                runtimeId: true
  get-runtime-min:
    handler: getruntime/maxmin.getMinimum
    runtime: python3.7
    timeout: 5
    environment:
      DYNAMODB_TABLE: "ServerlessFunctionMetrics-${self:provider.stage}"
    events:
      - http:
          path:  runtimes/{runtimeId}/minimum
          method: get
          cors:
            origin: ${opt:corsorigin,'*'}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false
          request:
            parameters:
              querystrings:
                platform: false
                state: false
                memory: false
                type: false
                startDate: false
                endDate: false
              paths:
                runtimeId: true
  get-runtime-max:
    handler: getruntime/maxmin.getMaximum
    runtime: python3.7
    timeout: 5
    environment:
      DYNAMODB_TABLE: "ServerlessFunctionMetrics-${self:provider.stage}"
    events:
      - http:
          path:  runtimes/{runtimeId}/maximum
          method: get
          cors:
            origin: ${opt:corsorigin,'*'}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false          
          request:
            parameters:
              querystrings:
                platform: false
                state: false
                memory: false
                type: false
                startDate: false
                endDate: false
              paths:
                runtimeId: true
  lambda-metrics:
    runtime: dotnetcore2.1
    timeout: 30 # max for api-backed lambdas 
    handler: CsharpHandlers::ServerlessPerformanceFramework.Handler::LambdaMetrics
    package:
      artifact: lambda-metrics-service/bin/release/netcoreapp2.1/deploy-package.zip
    events:
      - http:
          path: metrics
          method: post
    environment:
      DYNAMODB_METRICS_TABLE: "ServerlessFunctionMetrics-${self:provider.stage}"

  cost-metrics:
    runtime: nodejs8.10
    handler: lambda-cost-service/handler.costmetrics
    package:
      include:
      - lambda-cost-service/node_modules/**
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt:
              - LambdaMetricsTable
              - StreamArn
    environment:
      DYNAMODB_COSTMETRICS_TABLE: "ServerlessFunctionCostMetrics-${self:provider.stage}"
      AWS_LAMBDA_GBSECOND_COST: "0.00001667"
      AWS_LAMBDA_INVOKE_COST: "0.0000002"
      AZURE_FUNCTIONS_GBSECOND_COST: "0.000016"
      AZURE_FUNCTIONS_INVOKE_COST: "0.0000002"      

resources:
  Outputs:
    SpfApiUrl:
      Description: The URL for the published API
      Value:
        Fn::Join:
          - ""
          - - "https://"
            - Ref: ApiGatewayRestApi
            - ".execute-api.${self:provider.region}.amazonaws.com/${self:provider.stage}"  
      Export:
        Name: "SpfApiUrl-${self:provider.stage}"

  Resources:
    LambdaMetricsTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: ${self:custom.dynamoDeletionPolicy.${self:provider.stage}}
      Properties:
        TableName: "ServerlessFunctionMetrics-${self:provider.stage}"
        AttributeDefinitions:
          - AttributeName: LanguageRuntime
            AttributeType: S
          - AttributeName: RequestId
            AttributeType: S   
          - AttributeName: Duration
            AttributeType: N                           
        KeySchema:
          - AttributeName: LanguageRuntime
            KeyType: HASH
          - AttributeName: RequestId
            KeyType: RANGE
        LocalSecondaryIndexes:
          - IndexName: duration-index
            KeySchema:
              - AttributeName: LanguageRuntime
                KeyType: HASH
              - AttributeName: Duration
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        StreamSpecification:
          StreamViewType: NEW_IMAGE          
    CostMetricsTable:
        Type: AWS::DynamoDB::Table
        DeletionPolicy: ${self:custom.dynamoDeletionPolicy.${self:provider.stage}}
        Properties:
          TableName: "ServerlessFunctionCostMetrics-${self:provider.stage}"
          AttributeDefinitions:
            - AttributeName: LanguageRuntime
              AttributeType: S
            - AttributeName: RequestId
              AttributeType: S           
          KeySchema:
            - AttributeName: LanguageRuntime
              KeyType: HASH
            - AttributeName: RequestId
              KeyType: RANGE          
          ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1
          

