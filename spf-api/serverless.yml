# Serverless Performance Test Framework
# Config file for Lambda Service to store provided lambda metrics data into Dynamo DB

# Cost calculations service based on provided performance data
# This function is de-coupled from the lambda-metrics-service so that re-calculation of costs is 
# possible if pricing models change

service: spf-api

plugins:
  # serverless-domain-manager plugin used to hook API up to the Route53 DNS domain
  - serverless-domain-manager

custom:
  environmentConfiguration:
    dev:
      dynamoDeletionPolicy: Delete
      dynamoReadCapacityUnits: 2
      dynamoWriteCapacityUnits: 2
      dynamoReadTimeoutSeconds: 1
      dynamoReadRetryLimit: 1
      readAPIFunctionTimeout: 5
    prod:
      dynamoDeletionPolicy: Retain
      dynamoReadCapacityUnits: 8
      dynamoWriteCapacityUnits: 8
      dynamoReadTimeoutSeconds: 3
      dynamoReadRetryLimit: 1
      readAPIFunctionTimeout: 10
  customDomain:
    domainName: ${opt:domain,'api.serverlessperformance.net'}
    basePath: ${opt:stage,'dev'}

provider:
  name: aws
  memorySize: 128
  timeout: 12
  stage: ${opt:stage,'dev'}
  region: ${opt:region,'us-east-1'}
  environment:
    AWS_LAMBDA_GBSECOND_COST: "0.00001667"
    AWS_LAMBDA_INVOKE_COST: "0.0000002"
    AZURE_FUNCTIONS_GBSECOND_COST: "0.000016"
    AZURE_FUNCTIONS_INVOKE_COST: "0.0000002"
    DYNAMODB_TABLE: "ServerlessFunctionMetrics-${self:provider.stage}"
    DYNAMODB_READ_TIMEOUT_SECONDS: ${self:custom.environmentConfiguration.${self:provider.stage}.dynamoReadTimeoutSeconds}
    DYNAMODB_READ_RETRY_ATTEMPT_LIMIT: ${self:custom.environmentConfiguration.${self:provider.stage}.dynamoReadRetryLimit}

# you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
      Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/*"
    - Effect: "Allow"
      Action:
        - "dynamodb:Query"
        - "dynamodb:Scan"
      Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/*/index/*"


# packaging information here
functions:
  get-summary-stats:
      handler: getruntime/summarystats.getSummaryStats
      runtime: python3.8
      memorySize: 256
      timeout: ${self:custom.environmentConfiguration.${self:provider.stage}.readAPIFunctionTimeout}
      events:
        - http:
            path:  runtimes/{runtimeId}/summary
            method: get
            cors:
              origin: ${opt:corsorigin,'*'}
              headers:
                - Content-Type
                - X-Amz-Date
                - Authorization
                - X-Api-Key
                - X-Amz-Security-Token
                - X-Amz-User-Agent
              allowCredentials: false
            request:
              parameters:
                querystrings:
                  platform: false
                  state: false
                  memory: false
                  type: false
                  startDate: false
                  endDate: false
                  region: false
                paths:
                  runtimeId: true  
  get-mean:
    handler: getruntime/mean.getMeanDuration
    runtime: python3.8
    timeout: ${self:custom.environmentConfiguration.${self:provider.stage}.readAPIFunctionTimeout}
    events:
      - http:
          path:  runtimes/{runtimeId}/mean
          method: get
          cors:
            origin: ${opt:corsorigin,'*'}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false
          request:
            parameters:
              querystrings:
                platform: false
                state: false
                memory: false
                type: false
                startDate: false
                endDate: false
                region: false
              paths:
                runtimeId: true
  get-runtime-min:
    handler: getruntime/maxmin.getMinimum
    runtime: python3.8
    timeout: ${self:custom.environmentConfiguration.${self:provider.stage}.readAPIFunctionTimeout}
    events:
      - http:
          path:  runtimes/{runtimeId}/minimum
          method: get
          cors:
            origin: ${opt:corsorigin,'*'}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false
          request:
            parameters:
              querystrings:
                platform: false
                state: false
                memory: false
                type: false
                startDate: false
                endDate: false
                region: false
              paths:
                runtimeId: true
  get-runtime-max:
    handler: getruntime/maxmin.getMaximum
    runtime: python3.8
    timeout: ${self:custom.environmentConfiguration.${self:provider.stage}.readAPIFunctionTimeout}
    events:
      - http:
          path:  runtimes/{runtimeId}/maximum
          method: get
          cors:
            origin: ${opt:corsorigin,'*'}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false          
          request:
            parameters:
              querystrings:
                platform: false
                state: false
                memory: false
                type: false
                startDate: false
                endDate: false
                region: false
              paths:
                runtimeId: true
  lambda-metrics:
    runtime: dotnetcore2.1
    timeout: 30 # max for api-backed lambdas 
    handler: CsharpHandlers::ServerlessPerformanceFramework.Handler::LambdaMetrics
    package:
      artifact: lambda-metrics-service/bin/release/netcoreapp2.1/deploy-package.zip
    events:
      - http:
          path: metrics
          method: post
    environment:
      DYNAMODB_METRICS_TABLE: "ServerlessFunctionMetrics-${self:provider.stage}"     

resources:
  Outputs:
    SpfApiUrl:
      Description: The URL for the published API
      Value:
        Fn::Join:
          - ""
          - - "https://"
            - Ref: ApiGatewayRestApi
            - ".execute-api.${self:provider.region}.amazonaws.com/${self:provider.stage}"  
      Export:
        Name: "SpfApiUrl-${self:provider.stage}"

  Resources:
    LambdaMetricsTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: ${self:custom.environmentConfiguration.${self:provider.stage}.dynamoDeletionPolicy}
      Properties:
        TableName: "ServerlessFunctionMetrics-${self:provider.stage}"
        AttributeDefinitions:
          - AttributeName: LanguageRuntime
            AttributeType: S
          - AttributeName: RequestId
            AttributeType: S   
          - AttributeName: Duration
            AttributeType: N                           
        KeySchema:
          - AttributeName: LanguageRuntime
            KeyType: HASH
          - AttributeName: RequestId
            KeyType: RANGE
        LocalSecondaryIndexes:
          - IndexName: duration-index
            KeySchema:
              - AttributeName: LanguageRuntime
                KeyType: HASH
              - AttributeName: Duration
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        ProvisionedThroughput:
          ReadCapacityUnits: ${self:custom.environmentConfiguration.${self:provider.stage}.dynamoReadCapacityUnits}
          WriteCapacityUnits: ${self:custom.environmentConfiguration.${self:provider.stage}.dynamoWriteCapacityUnits}
          

